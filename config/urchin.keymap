/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include "keymap_italian.h"
#include "keys_es.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {

    behaviors {
          c_and_cedillac_and_cedilla: c_and_cedillac_and_cedilla {
              // Enables holding the first mod-tap key
              // by performing a tap-release-hold sequence.
              // To use it: "&qt KEYCODE1 KEYCODE2"c_and_cedilla: c_and_cedilla {

              compatible = "zmk,behavior-mod-morph";
              label = "C_AND_CEDILLA";
              bindings = <&kp ES_C>, <&kp ES_C_CEDILLA>;

              #binding-cells = <0>;
              mods = <(MOD_LSFT|MOD_RSFT)>;
          };

          bksp_and_del: bksp_and_del {
              compatible = "zmk,behavior-mod-morph";
              label = "BKSP_AND_DEL";
              bindings = <&kp BACKSPACE>, <&kp DELETE>;

              #binding-cells = <0>;
              mods = <(MOD_LSFT|MOD_RSFT)>;
          };

          layer_2_key: layer_2_key {
              compatible = "zmk,behavior-hold-tap";
              label = "LAYER_2_KEY";
              bindings = <&mo>, <&bksp_and_del>;

              #binding-cells = <2>;
              tapping-term-ms = <200>;
          };

    };

    macros {
    };

    combos {
        compatible = "zmk,combos";
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer
        alpha {
            bindings = <
    &kp ES_Q    &kp ES_W    &kp ES_E    &kp ES_R    &kp ES_T    &kp ES_Y    &kp ES_U    &kp ES_I        &kp ES_O      &kp ES_P
    &kp ES_A    &kp ES_S    &kp ES_D    &kp ES_F    &kp ES_G    &kp ES_H    &kp ES_J    &kp ES_K        &kp ES_L      &kp ES_N_TILDE
    &kp ES_Z    &kp ES_X    &kp ES_C    &kp ES_V    &kp ES_B    &kp ES_N    &kp ES_M    &kp ES_COMMA    &kp ES_DOT    &kp ES_ACUTE
                                  &trans    &trans    &trans    &trans
            >;
        };

        numbers {
            bindings = <
    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans    &trans
            >;
        };

        symbols {
            bindings = <
    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans    &trans
            >;
        };

        navigation {
            bindings = <
    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans    &trans
            >;
        };
    };
};
