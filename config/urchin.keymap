/*
 * Copyright (c) 2020 duckyb
 * SPDX-License-Identifier: MIT
 */

#include "keymap_italian.h"
#include "keys_es.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {

    behaviors {
          c_and_ced: c_and_cedilla {
              // Enables holding the first mod-tap key
              // by performing a tap-release-hold sequence.
              // To use it: "&qt KEYCODE1 KEYCODE2"c_and_cedilla: c_and_cedilla {

              compatible = "zmk,behavior-mod-morph";
              label = "C_AND_CEDILLA";
              bindings = <&kp ES_C>, <&kp ES_C_CEDILLA>;

              #binding-cells = <0>;
              mods = <(MOD_LSFT|MOD_RSFT)>;
          };

          bksp_and_del: bksp_and_del {
              compatible = "zmk,behavior-mod-morph";
              label = "BKSP_AND_DEL";
              bindings = <&kp BACKSPACE>, <&kp DELETE>;

              #binding-cells = <0>;
              mods = <(MOD_LSFT|MOD_RSFT)>;
          };

          ord: ordinal {
              compatible = "zmk,behavior-mod-morph";
              label = "ORD";
              bindings = <&kp ES_ORDM>, <&kp ES_ORDF>;

              #binding-cells = <0>;
              mods = <(MOD_LSFT|MOD_RSFT)>;
          };

          lay_2: layer_2_key {
              compatible = "zmk,behavior-hold-tap";
              label = "LAYER_2_KEY";
              bindings = <&mo>, <&bksp_and_del>;

              #binding-cells = <2>;
              tapping-term-ms = <200>;
          };

    };

    macros {
    };

    combos {
        compatible = "zmk,combos";
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer
        alpha {
            bindings = <
    &kp ES_Q    &kp ES_W    &kp ES_E      &kp ES_R      &kp ES_T         &kp ES_Y               &kp ES_U    &kp ES_I        &kp ES_O      &kp ES_P
    &kp ES_A    &kp ES_S    &kp ES_D      &kp ES_F      &kp ES_G         &kp ES_H               &kp ES_J    &kp ES_K        &kp ES_L      &kp ES_N_TILDE
    &kp ES_Z    &kp ES_X    &c_and_ced    &kp ES_V      &kp ES_B         &kp ES_N               &kp ES_M    &kp ES_COMMA    &kp ES_DOT    &kp ES_ACUTE
                                          &lay_2 2 0    &mt LCTRL RET    &mt LSHIFT ES_SPACE    &trans
            >;
        };

        numbers {
            bindings = <
    &trans       &trans       &kp ES_PRCNT    &kp ES_FSLH    &kp ES_MINUS    &kp ES_PLUS    &kp ES_STAR    &kp ES_EQUAL    &trans       &trans
    &kp ES_N1    &kp ES_N2    &kp ES_N3       &kp ES_N4      &kp ES_N5       &kp ES_N6      &kp ES_N7      &kp ES_N8       &kp ES_N9    &kp ES_N0
    &trans       &trans       &trans          &trans         &trans          &trans         &trans         &trans          &trans       &trans
                                              &trans         &trans          &trans         &trans
            >;
        };

        symbols {
            bindings = <
    &kp ES_EURO    &kp ES_AT        &kp ES_LT       &kp ES_GT      &kp ES_SEMI     &kp ES_COLON    &kp ES_LBRC      &kp ES_RBRC     &kp ES_PIPE     &kp ES_BSLH
    &ord           &kp ES_HASH      &kp ES_LBKT     &kp ES_RBKT    &kp ES_SQT      &kp ES_DQT      &kp ES_LPAR      &kp ES_RPAR     &kp ES_AMPS     &kp ES_GRAVE
    &kp ES_NOT     &kp ES_MIDDOT    &kp ES_IEXCL    &kp ES_EXCL    &kp ES_UNDER    &kp ES_DLLR     &kp ES_IQMARK    &kp ES_QMARK    &kp ES_TILDE    &kp ES_UMLAUT
                                                    &trans         &trans          &trans          &trans
            >;
        };

        navigation {
            bindings = <
    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans    &trans
            >;
        };
    };
};
